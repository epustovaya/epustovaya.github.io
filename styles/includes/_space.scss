$space-values: (
  0: 0,
  2: 2px,
  4: 4px,
  6: 6px,
  8: 8px,
  12: 12px,
  16: 16px,
  20: 20px,
  24: 24px,
  28: 28px,
  30: 30px,
  32: 32px,
  36: 36px,
  40: 40px,
  44: 44px,
  48: 48px,
  50: 50px,
  52: 52px,
  56: 56px,
  60: 60px,
  64: 64px,
  80: 80px,
  120: 120px,
  180: 180px
);

@function get-space-property($position, $as-margin) {
  $positions: ("top", "right", "bottom", "left");

  @if index($positions, $position) != null {
    @if $as-margin == true {
      @return margin-#{$position};
    } @else {
      @return padding-#{$position};
    }
  }

  @error "Incorrect property #{$position}. Must be one of (#{$positions}).";
}

@mixin space($position, $spec, $as-margin: false) {
  @if type-of($spec) == number {
    @if (map-has-key($space-values, $spec)) {
      #{get-space-property($position, $as-margin)}: map-get($space-values, $spec);
    } @else {
      @error "Incorrect property #{$spec}. Must be one of (#{map-keys($space-values)}).";
    }
  } @else if type-of($spec) == map {
    @each $breakpoint, $value in $spec {
      @if (map-has-key($display-breakpoints, $breakpoint)) {
        @media (min-width: map-get($display-breakpoints, $breakpoint)) {
          #{get-space-property($position, $as-margin)}: map-get($space-values, $value);
        }
      } @else {
        @error "Incorrect #{$breakpoint}. Must be one of (#{map-keys($display-breakpoints)})."
      }
    }
  } @else {
    @error "Incorrect property #{$spec}. Must be either map or number.";
  }
}
